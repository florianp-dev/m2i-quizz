@model List<ModelEntities.ModelViews.InsertAnswer_AnswerCommentViewModel>

@{
    ViewBag.Title = "Create";
    ModelEntities.Entities.Question question = ViewBag.Question;
}

<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
<div class="form-horizontal">
    <h4>Answer</h4>

    <div class="form-group">
        @Html.LabelFor(model => question.QuestionID, "Question:", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => question.Wording)
        </div>
    </div>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @for (int i = 0; i < Model.Count(); i++)
    {
        @Html.HiddenFor(model => Model[i].QuestionID)
        <div class="form-group">
            @Html.LabelFor(model => Model[i].Content, "Réponse:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model[i].Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model[i].Content, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model[i].IsCorrect, "Est Correcte:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => Model[i].IsCorrect)
                    @Html.ValidationMessageFor(model => Model[i].IsCorrect, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => Model[i].QCommentID, "Commentaire:", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => Model[i].QContent, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model[i].QCommentID, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
    }
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
        
    }

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
